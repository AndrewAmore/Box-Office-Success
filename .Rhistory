dropped_df %>% group_by(Release.Month) %>% filter(Release.Month == "January")
dropped_df %>% group_by(Release.Month) %>% filter(Release.Month == "January")
mixed_model_1 = lmer(formula = Net.Profit ~ Critic.Score + Title.Sentiment +
(1 | Release.Month), data=dropped_df)
summary(mixed_model_1)
mixed_model_1 = lmer(formula = Net.Profit ~  (1 | Release.Month), data=dropped_df)
summary(mixed_model_1)
mixed_model_1 = lmer(formula = Net.Profit ~  (1 | Release.Month), data=df)
summary(mixed_model_1)
mixed_model_1 = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(1 | Release.Month), data=dropped_df)
summary(mixed_model_1)
REsim(mixed_model_1)             # mean, median and sd of the random effect estimates
plotREsim(REsim(mixed_model_1))  # plot the interval estimates
dropped_df %>% group_by(Release.Month) %>% summarize(mean = mean(Net.Profit))
mixed_model_1 = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(0 | Release.Month), data=dropped_df)
mixed_model_1 = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(1 | Release.Month), data=dropped_df)
summary(mixed_model_1)
coef(mixed_model_1)
coef(summary(mixed_model_1))
tst = coef(summary(mixed_model_1))
tst
typeof(tst)
tst[,1]
names(tst[,1])
names(tst[,2])
tst[,2]
tst[,4]
tst[,5]
confint(mixed_model_1)
tst = coef(summary(mixed_model_1))
rslts = data.frame(
Coeffs = names(tst[,1]),
Estimate = tst[,1],
SE = tst[,2],
p = tst[,5],
CI_Lower = confint(mixed_model_1)[,1],
CI_Upper = confint(mixed_model_1)[,2]
)
summary(mixed_model_1)
confint(mixed_model_1)
confint(mixed_model_1, oldNmaes=FALSE)
confint(mixed_model_1, oldNames=FALSE)
coefficients(mixed_model_1)
tst = coef(summary(mixed_model_1))
rslts = data.frame(
Coeffs = c("sd_(Intercept)|Release.Month", "sigma", names(tst[,1])),
Estimate = c(" ", " ", tst[,1]),
SE = c(" ", " ", tst[,2]),
p = c(" ", " ", tst[,5]),
CI_Lower = confint(mixed_model_1, oldNames=FALSE)[,1],
CI_Upper = confint(mixed_model_1, oldNames=FALSE)[,2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)","SE (USD)", "P-Value",
"CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 4: Regression Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
conf_resulst = confint(mixed_model_1, oldNames=FALSE)
conf_resulst
conf_resulst[2:nrow(conf_resulst), 2]
conf_resulst[3:nrow(conf_resulst), 2]
tst = coef(summary(mixed_model_1))
conf_results = confint(mixed_model_1, oldNames=FALSE)
rslts = data.frame(
Coeffs = names(tst[,1]),
Estimate = tst[,1],
SE = tst[,2],
p = tst[,5],
CI_Lower = conf_results[3:nrow(conf_results),1],
CI_Upper = conf_results[3:nrow(conf_results),2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)","SE (USD)", "P-Value",
"CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 4: Regression Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
conf_results[1:3,1]
conf_results
rslts = data.frame(
Coeffs = names(conf_results[1:2,1]),
CI_Lower = conf_results[1:2,1],
CI_Upper = conf_results[1:2,2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)","SE (USD)", "P-Value",
"CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 8: Mixed Model 1 Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 8: Mixed Model 1 Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
knitr::opts_chunk$set(include=FALSE, echo=FALSE, message=FALSE, warning = FALSE, fig.align = "center")
library(tidyverse)  # data manipulation
library(corrplot)   # correlation plots
library(rcompanion) # correlation computation with categorical variables
library(pander)     # pretty printing tables
library(sentimentr) # sentiment analysis
# library(mice)       # missing data imputation
library(ggpubr)     # panel plotting
library(lme4)       # model fitting
# library(lmerTest)   # p-values from mixed effect modeling
library(jtools)     # analyze regression results
library(scales)     # table formatting (commas)
library(merTools)   # investigate mixed effects
df = read.csv(file="./data/United_States_Film_Releases_2019.csv",
na.strings = c("","N/A"))
# remove '$' and ',' from fields
df$Box.Office = gsub("[$,]", "", df$Box.Office)
df$Budget = gsub("[$,]", "", df$Budget)
# clean up genre
## remove spaces
df$Genre = gsub(" ", "", df$Genre, fixed = TRUE)
## create field with the number of genres
df$Num.Genres = str_count(df$Genre, "/") + 1
## assume genres listed in order of "priority"...only take the top two genres
df = df %>%
separate(col=Genre, into=c("Genre.1", "Genre.2"), sep="/", extra="drop", fill="right", remove=FALSE)
df$Genre.2[is.na(df$Genre.2)] = "Not-Applicable"
# convert to desired types
df$Box.Office = as.numeric(df$Box.Office)
df$Budget = as.numeric(df$Budget)
## should try and tie factor levels here so they get assigned the same level
df$Genre.1 = as.factor(df$Genre.1)
df$Genre.2 = as.factor(df$Genre.2)
df$Release.Date..mmddyyyy. = as.Date(df$Release.Date..mmddyyyy.,
format="%m/%d/%Y")
# rename columns
names(df)[names(df) == 'Critic.Score..IMDB.x.10.'] = 'Critic.Score'
names(df)[names(df) == 'Run.Time..minutes.'] = 'Run.Time'
names(df)[names(df) == 'Release.Date..mmddyyyy.'] = 'Release.Date'
# create netprofit field
df$Net.Profit = df$Box.Office - df$Budget
# create sentiment field off title
df$Title.Sentiment = (sentimentr::sentiment(df$Title))$sentiment
# add more specific date fields
df$Day.of.Week = weekdays(df$Release.Date)
df$Release.Month = as.factor(months(df$Release.Date))
# set.seed(79)
set.seed(777)
options(scipen=999)
options(digits = 3)
sample = df %>% slice_sample(n=1)
## refactor table
tbl_df = data.frame(
Column.Names = colnames(df),
Column.Description = c(
"film's title",
"date of movie release",
"name of the movie production company",
"leading actor/actress in the film",
"second leading actor/actress in the film",
"third leading actor/actress in the film",
"director of the film",
"amount (USD) film made at the box office",
"budget (USD) of film",
"run time (minutes) of film",
"IDMB score of film",
"full genre",
"main genre of film",
"secondary genre of film",
"number of genres of film",
"profit (USD) of film",
"polarity score of movie title",
"release day",
"release month"
),
Sample = t(sample)
)
ggtexttable(tbl_df, rows=NULL, cols = c("Field Name", "Description", "Sample"),
theme=ttheme("classic", base_size = 7, padding=unit(c(3,3), "mm"))) %>%
table_cell_font(row = 2:(nrow(tbl_df) + 1), column = 1, face = "bold", size = 6.5) %>%
table_cell_font(row = 2:(nrow(tbl_df) + 1), column = 2, face = "italic", size = 6.5) %>%
table_cell_font(row = 2:(nrow(tbl_df) + 1), column = 3, face = "italic", size = 6.5) %>%
table_cell_bg(row = 14:(nrow(tbl_df) + 1), column=1:3, linewidth = 1,
fill="#CC9900", color = "black") %>%
tab_add_title(text = "Table 1: Metadata Information", size = 9, face = "plain",
padding=unit(c(0,0), "mm"))
na_count = sapply(df, function(y) sum(length(which(is.na(y)))))
tst = data.frame(na_count) %>%
filter(na_count > 0)
ggplot(tst, aes(x=row.names(tst), y=na_count/nrow(df))) +
geom_bar(stat = 'identity') +
labs(x = "Field Name", y = "Fraction Missing", title="Missing Data Summary") +
ylim(0,0.4) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text(aes(label=round(na_count/nrow(df), 3)), position=position_dodge(width=0.9), vjust=-0.25, size = 3)
# bayesian imputation with 5 trials
# num_trials = 5
# # prep data for imputation
# raw_imp_df = df %>% select(-Net.Profit, -Title.Sentiment)
# imp_df = mice(raw_imp_df, m = num_trials, print = TRUE)
# # generate mega dataset
# new_df = complete(imp_df, "long")
options(scipen=999)
options(digits = 3)
samp = df %>%
filter(Title %in%
c("The Irishman", "Avengers: Endgame", "The Lion King", "Frozen II")) %>%
dplyr::select(Title, Production.Company, Box.Office, Budget, Net.Profit) %>%
mutate_each(funs(prettyNum(., big.mark=",", format="e")))
samp$Removal.Reason = c("Outlier", "Outlier", "Limited Release", "Outlier")
ggtexttable(samp, rows=NULL, theme=ttheme("classic", base_size = 7, padding=unit(c(3,3), "mm"))) %>%
table_cell_bg(row = c(2:3, 5), column=5, linewidth = 3, fill="lightgreen",
color = "black") %>%
table_cell_bg(row = 4, column=5, linewidth = 3, fill="#FF9999",
color = "black") %>%
tab_add_title(text = "Table 2: Outlier Sample", size = 9, face = "plain",
# hjust=-1.75, vjust=1.5,
padding=unit(c(0,0), "mm"))
## drop netflix films and Outliers
df = df %>%
filter(!(grepl("Netflix", Production.Company, fixed = TRUE) & Title != "Isn't It Romance")) %>%
filter(!Title %in% c("Avengers: Endgame", "The Lion King", "Frozen II"))
## create dropped dataset
dropped_df = na.omit(df)
## this only looks at complete cases (rows with no NAs)
M = cor(select_if(df, is.numeric), use="complete.obs")
# corr = corrplot(M, type="upper", order="hclust")
tbl = ggtexttable(round(M, 2), theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))
tbl = table_cell_bg(tbl, row = 7, column=2:tab_ncol(tbl), linewidth = 5,
fill="darkolivegreen1", color = "darkolivegreen4") %>%
table_cell_bg(row = 2:tab_nrow(tbl), column=7, linewidth = 5,
fill="darkolivegreen1", color = "darkolivegreen4") %>%
tab_add_title(text = "Table 3: Correlation Matrix", size = 9, face = "plain",
# hjust=-1.75, vjust=1.5
padding=unit(c(0,0), "mm"))
scatter = ggplot(df, aes(x=Budget/10^6, y=Box.Office/10^6)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, size = 0.5, linetype="dashed") +
geom_smooth(method = lm, se=TRUE, size=.5, alpha  = .5) +
labs(x="Budget (Millions)", y="Box Office (Millions)")
## remove the plot
# ggarrange(tbl, scatter, ncol=1, nrow=2, heights=c(0.7, 1))
tbl
# net-profits and budget
p1 = ggplot(df, aes(x=Budget/10^6, y=Net.Profit/10^6)) +
geom_point() +
geom_smooth(method = lm, se=TRUE, size=.5, alpha  = .5) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
labs(subtitle="Budget", y="Net-Profit (Millions)", x="Budget (Millions)")
# net-profits and critical score
p2 = ggplot(df, aes(x=Critic.Score, y=Net.Profit/10^6)) +
geom_point() +
geom_smooth(method = lm, se=TRUE, size=.5, alpha  = .5) +
labs(subtitle="Critical Score") +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.subtitle = element_text(hjust = 0.5))
ggarrange(p1, p2, ncol=2, nrow=1, widths = c(1.1,0.9))
# annotate_figure(plot, top = text_grob("Relationship with Net-Profit",
#                color = "black", size = 14))
# with dropped data
model_1 = lm(formula = Net.Profit ~ Budget + Critic.Score, data=dropped_df)
summary(model_1)
plot(model_1)
# create results data frames
rslts = data.frame(
Coeffs = names(model_1$coefficients),
Estimate = model_1$coefficients,
SE = sqrt(diag(vcov(model_1))),
p = summary(model_1)$coefficients[,4],
CI_Lower = confint(model_1)[,1],
CI_Upper = confint(model_1)[,2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)","SE (USD)", "P-Value",
"CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 4: Regression Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
summ = data.frame(
Obs = nrow(dropped_df),
Residual_SE = sqrt(sum(model_1$residuals^2)/model_1$df.residual),
R_2 = summary(model_1)$r.squared,
Adjusted_R_2 = summary(model_1)$adj.r.squared
)
summ = summ %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
ggtexttable(summ, rows = NULL,
cols = c("Observations", "Residual Std. Error", "R^2", "Adjusted R^2"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))
# par(mfrow = c(1, 2))
# plot(model_1, which=c(1))
plot(model_1, which=c(3))
## add sentiment
model_1_b = lm(formula = Net.Profit ~ Budget + Critic.Score + Title.Sentiment, data=dropped_df)
# summary(model_1_b)
tstb = anova(model_1, model_1_b)
## add day of week
model_1_c = lm(formula = Net.Profit ~ Budget + Critic.Score + Day.of.Week, data=dropped_df)
# summary(model_1_c)
tstc = anova(model_1, model_1_c)
## add run time (interaction term??)
model_1_d = lm(formula = Net.Profit ~ Budget + Critic.Score + Run.Time, data=dropped_df)
# summary(model_1_d)
tstd = anova(model_1, model_1_d)
## add genre.1
model_1_e = lm(formula = Net.Profit ~ Budget + Critic.Score + Genre.1 , data=dropped_df)
# summary(model_1_e)
tste = anova(model_1, model_1_e)
### build results table
tst_rslts = data.frame(
covar = c("Reference Model", "Title.Sentiment", "Day.of.Week", "Run.Time", "Genre.1"),
DF = c(tstb$Res.Df, tstc$Res.Df[-1], tstd$Res.Df[-1], tste$Res.Df[-1]),
RSS = c(tstb$RSS, tstc$RSS[-1], tstd$RSS[-1], tste$RSS[-1]),
SumSq = c(tstb$`Sum of Sq`, tstc$`Sum of Sq`[-1], tstd$`Sum of Sq`[-1], tste$`Sum of Sq`[-1]),
F_ = c(tstb$F, tstc$F[-1], tstd$F[-1], tste$F[-1]),
P_ = c(tstb$`Pr(>F)`, tstc$`Pr(>F)`[-1], tstd$`Pr(>F)`[-1], tste$`Pr(>F)`[-1])
)
ggtexttable(tst_rslts, rows = NULL,
cols = c("Added Covariate", "Df", "RSS", "RSS Reduction from Ref.",
"Test-Statistic (F)", "P-Value"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm"))) %>%
tab_add_title(text = "Table 5: F-Test Results", size = 9, face = "plain",
# hjust=-1.4, vjust=1.5
padding=unit(c(0,0), "mm"))
# create results data frames
rslts = data.frame(
Coeffs = names(model_1_b$coefficients),
Estimate = model_1_b$coefficients,
SE = sqrt(diag(vcov(model_1_b))),
p = summary(model_1_b)$coefficients[,4],
CI_Lower = confint(model_1_b)[,1],
CI_Upper = confint(model_1_b)[,2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)", "SE (USD)",
"P-Value", "CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 6: Final Regression Results", size = 9, face = "plain",
# hjust=-0.85, vjust=1.5
padding=unit(c(0,0), "mm"))
summ = data.frame(
Obs = nrow(dropped_df),
Residual_SE = sqrt(sum(model_1_b$residuals^2)/model_1_b$df.residual),
R_2 = summary(model_1_b)$r.squared,
Adjusted_R_2 = summary(model_1_b)$adj.r.squared
)
summ = summ %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
ggtexttable(summ, rows = NULL,
cols = c("Observations", "Residual Std. Error", "R^2", "Adjusted R^2"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))
ggtexttable(df %>%
group_by(Num.Genres) %>%
count(),
rows = NULL,
cols = c("Number of Genres by Film", "Number of Observations"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm"))) %>%
tab_add_title(text = "Table 7: Genre Clustering", size = 9, face = "plain",
# hjust=-0.6, vjust=1.5
padding=unit(c(0,0), "mm"))
# df %>% group_by(Genre.1) %>% count() %>% arrange(n)
df_group_mn = (df %>%
group_by(Genre.1) %>%
count() %>%
ungroup() %>%
summarize(mean = median(n)))[[1]]
ggplot(df %>%
group_by(Genre.1) %>%
count(), aes(x=n, y=reorder(Genre.1, n))) +
geom_bar(stat="identity") +
labs(y="Genre") +
theme(axis.title.y=element_blank()) +
geom_vline(xintercept = df_group_mn, color="red", linetype="dashed", size=1) +
geom_text(aes(label = "Median", x = 4, y = -Inf), vjust = 1) +
coord_cartesian(clip = 'off')
p1 = ggplot(data=df,
aes(x=Critic.Score, y=Net.Profit/10^6)) +
geom_point(size = 1.2, alpha=.9) +
# theme_minimal() +
theme(legend.position = "none", plot.subtitle = element_text(hjust = 0.5)) +
# add regression line
geom_smooth(method = lm, se=FALSE, size=.5, alpha  = .5) +
labs(subtitle="No Grouping", x="Critic Score", y="Net-Profit ($ Millions)")
p2 = ggplot(data=df,
aes(x=Critic.Score, y=Net.Profit/10^6, col=Release.Month)) +
geom_point(size = 1.2, alpha=.9) +
# theme_minimal() +
theme(legend.position = "none") +
# add regression line
geom_smooth(method = lm, se=FALSE, size=.5, alpha  = .5) +
labs(subtitle = "Grouped by Release Month", x="Critic Score") +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.subtitle = element_text(hjust = 0.5))
ggarrange(p1, p2, ncol=2, nrow=1)
# annotate_figure(plot, top = text_grob("Motivating the Model",
#                color = "black", size = 14))
mixed_model_1 = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(1 | Release.Month), data=dropped_df)
# summary(mixed_model_1)
# REsim(mixed_model_1)             # mean, median and sd of the random effect estimates
# plotREsim(REsim(mixed_model_1))  # plot the interval estimates
tst = coef(summary(mixed_model_1))
conf_results = confint(mixed_model_1, oldNames=FALSE)
rslts = data.frame(
Coeffs = names(tst[,1]),
Estimate = tst[,1],
SE = tst[,2],
p = tst[,5],
CI_Lower = conf_results[3:nrow(conf_results),1],
CI_Upper = conf_results[3:nrow(conf_results),2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)","SE (USD)", "P-Value",
"CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 8: Mixed Model 1 Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
tst
tst[,5]
knitr::opts_chunk$set(include=FALSE, echo=FALSE, message=FALSE, warning = FALSE, fig.align = "center")
library(tidyverse)  # data manipulation
library(corrplot)   # correlation plots
library(rcompanion) # correlation computation with categorical variables
library(pander)     # pretty printing tables
library(sentimentr) # sentiment analysis
# library(mice)       # missing data imputation
library(ggpubr)     # panel plotting
library(lme4)       # model fitting
library(lmerTest)   # p-values from mixed effect modeling
library(jtools)     # analyze regression results
library(scales)     # table formatting (commas)
library(merTools)   # investigate mixed effects
mixed_model = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(1 + Critic.Score | Release.Month), data=dropped_df)
summary(mixed_model)
REsim(mixed_model)             # mean, median and sd of the random effect estimates
summary(mixed_model)
mixed_model = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(0 + Critic.Score | Release.Month), data=dropped_df)
summary(mixed_model)
mixed_model = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(0 + Critic.Score + Budget | Release.Month), data=dropped_df)
mixed_model = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(0 + Critic.Score | Release.Month), data=dropped_df)
mixed_model_2 = lmer(formula = Net.Profit ~ Budget +  Critic.Score + Title.Sentiment +
(0 + Critic.Score | Release.Month), data=dropped_df)
summary(mixed_model)
summary(mixed_model_2)
REsim(mixed_model_2)             # mean, median and sd of the random effect estimates
plotREsim(REsim(mixed_model_2))  # plot the interval estimates
tst = coef(summary(mixed_model_2))
conf_results = confint(mixed_model_2, oldNames=FALSE)
rslts = data.frame(
Coeffs = names(tst[,1]),
Estimate = tst[,1],
SE = tst[,2],
p = tst[,5],
CI_Lower = conf_results[3:nrow(conf_results),1],
CI_Upper = conf_results[3:nrow(conf_results),2]
)
options(scipen = 1)
options(digits = 3)
# format the results with commas and appropriate rounding
rslts = rslts %>% mutate_each(funs(prettyNum(., big.mark=",", format="e")))
# create tables and present
ggtexttable(rslts, rows = NULL,
cols = c("Coefficient", "Estimate (USD)","SE (USD)", "P-Value",
"CI Lower (2.5%)", "CI Upper (97.5%)"),
theme=ttheme("classic", base_size = 8, padding=unit(c(3,3), "mm")))  %>%
tab_add_title(text = "Table 9: Mixed Model 2 Results", size = 9, face = "plain",
# hjust=-1.15, vjust=1.5
padding=unit(c(0,0), "mm"))
plotREsim(REsim(mixed_model_2))  # plot the interval estimates
plotREsim(REsim(mixed_model_2))  # plot the interval estimates
